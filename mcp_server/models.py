# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:39:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Amount(RootModel[str]):
    root: str


class ClientToken(RootModel[str]):
    root: str


class CurrencyCode(Enum):
    CNY = 'CNY'
    USD = 'USD'


class CurrencyList(RootModel[List[CurrencyCode]]):
    root: List[CurrencyCode]


class DateTime(RootModel[datetime]):
    root: datetime


class DeleteQueuedSavingsPlanResponse(BaseModel):
    pass


class EC2InstanceFamily(RootModel[str]):
    root: str


class InternalServerException(RootModel[Any]):
    root: Any


class JsonSafeFilterValueString(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_ \/.\:\-\(\)]+$')]
):
    root: constr(pattern=r'^[a-zA-Z0-9_ \/.\:\-\(\)]+$')


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class PageSize(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class PaginationToken(
    RootModel[constr(pattern=r'^[A-Za-z0-9/=\+]+$', max_length=1024)]
):
    root: constr(pattern=r'^[A-Za-z0-9/=\+]+$', max_length=1024)


class Region(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SavingsPlanArn(
    RootModel[
        constr(
            pattern=r'arn:aws:[a-z]+:([a-z]{2}-[a-z]+-\d{1}|):(\d{12}):savingsplan\/([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'
        )
    ]
):
    root: constr(
        pattern=r'arn:aws:[a-z]+:([a-z]{2}-[a-z]+-\d{1}|):(\d{12}):savingsplan\/([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'
    )


class SavingsPlanArnList(RootModel[List[SavingsPlanArn]]):
    root: List[SavingsPlanArn] = Field(..., max_length=100)


class SavingsPlanDescription(RootModel[constr(pattern=r'^[a-zA-Z0-9_\- ]+$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_\- ]+$')


class SavingsPlanDescriptionsList(RootModel[List[SavingsPlanDescription]]):
    root: List[SavingsPlanDescription]


class SavingsPlanId(RootModel[str]):
    root: str


class SavingsPlanIdList(RootModel[List[SavingsPlanId]]):
    root: List[SavingsPlanId]


class SavingsPlanOfferingFilterAttribute(Enum):
    region = 'region'
    instanceFamily = 'instanceFamily'


class SavingsPlanOfferingId(RootModel[str]):
    root: str


class SavingsPlanOfferingPropertyKey(Enum):
    region = 'region'
    instanceFamily = 'instanceFamily'


class SavingsPlanOfferingRateProperty(BaseModel):
    name: Optional[JsonSafeFilterValueString] = None
    value: Optional[JsonSafeFilterValueString] = None


class SavingsPlanOfferingRatePropertyList(
    RootModel[List[SavingsPlanOfferingRateProperty]]
):
    root: List[SavingsPlanOfferingRateProperty]


class SavingsPlanOperation(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_ \/.:-]*$', max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_ \/.:-]*$', max_length=255)


class SavingsPlanOperationList(RootModel[List[SavingsPlanOperation]]):
    root: List[SavingsPlanOperation]


class SavingsPlanPaymentOption(Enum):
    All_Upfront = 'All Upfront'
    Partial_Upfront = 'Partial Upfront'
    No_Upfront = 'No Upfront'


class SavingsPlanPaymentOptionList(RootModel[List[SavingsPlanPaymentOption]]):
    root: List[SavingsPlanPaymentOption]


class SavingsPlanProductType(Enum):
    EC2 = 'EC2'
    Fargate = 'Fargate'
    Lambda = 'Lambda'
    SageMaker = 'SageMaker'


class SavingsPlanProductTypeList(RootModel[List[SavingsPlanProductType]]):
    root: List[SavingsPlanProductType]


class SavingsPlanRateFilterAttribute(Enum):
    region = 'region'
    instanceFamily = 'instanceFamily'
    instanceType = 'instanceType'
    productDescription = 'productDescription'
    tenancy = 'tenancy'
    productId = 'productId'


class SavingsPlanRateFilterName(Enum):
    region = 'region'
    instanceType = 'instanceType'
    productDescription = 'productDescription'
    tenancy = 'tenancy'
    productType = 'productType'
    serviceCode = 'serviceCode'
    usageType = 'usageType'
    operation = 'operation'


class SavingsPlanRateOperation(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_ \/.:-]*$', max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_ \/.:-]*$', max_length=255)


class SavingsPlanRateOperationList(RootModel[List[SavingsPlanRateOperation]]):
    root: List[SavingsPlanRateOperation]


class SavingsPlanRatePricePerUnit(RootModel[str]):
    root: str


class SavingsPlanRatePropertyKey(Enum):
    region = 'region'
    instanceType = 'instanceType'
    instanceFamily = 'instanceFamily'
    productDescription = 'productDescription'
    tenancy = 'tenancy'


class SavingsPlanRateServiceCode(Enum):
    AmazonEC2 = 'AmazonEC2'
    AmazonECS = 'AmazonECS'
    AmazonEKS = 'AmazonEKS'
    AWSLambda = 'AWSLambda'
    AmazonSageMaker = 'AmazonSageMaker'


class SavingsPlanRateServiceCodeList(RootModel[List[SavingsPlanRateServiceCode]]):
    root: List[SavingsPlanRateServiceCode]


class SavingsPlanRateUnit(Enum):
    Hrs = 'Hrs'
    Lambda_GB_Second = 'Lambda-GB-Second'
    Request = 'Request'


class SavingsPlanRateUsageType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_ \/.:-]+$', max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_ \/.:-]+$', max_length=255)


class SavingsPlanRateUsageTypeList(RootModel[List[SavingsPlanRateUsageType]]):
    root: List[SavingsPlanRateUsageType]


class SavingsPlanServiceCode(RootModel[constr(pattern=r'^[a-zA-Z]+$', max_length=255)]):
    root: constr(pattern=r'^[a-zA-Z]+$', max_length=255)


class SavingsPlanServiceCodeList(RootModel[List[SavingsPlanServiceCode]]):
    root: List[SavingsPlanServiceCode]


class SavingsPlanState(Enum):
    payment_pending = 'payment-pending'
    payment_failed = 'payment-failed'
    active = 'active'
    retired = 'retired'
    queued = 'queued'
    queued_deleted = 'queued-deleted'


class SavingsPlanStateList(RootModel[List[SavingsPlanState]]):
    root: List[SavingsPlanState]


class SavingsPlanType(Enum):
    Compute = 'Compute'
    EC2Instance = 'EC2Instance'
    SageMaker = 'SageMaker'


class SavingsPlanTypeList(RootModel[List[SavingsPlanType]]):
    root: List[SavingsPlanType]


class SavingsPlanUsageType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_ \/.:-]+$', max_length=255)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_ \/.:-]+$', max_length=255)


class SavingsPlanUsageTypeList(RootModel[List[SavingsPlanUsageType]]):
    root: List[SavingsPlanUsageType]


class SavingsPlansDuration(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class SavingsPlansFilterName(Enum):
    region = 'region'
    ec2_instance_family = 'ec2-instance-family'
    commitment = 'commitment'
    upfront = 'upfront'
    term = 'term'
    savings_plan_type = 'savings-plan-type'
    payment_option = 'payment-option'
    start = 'start'
    end = 'end'


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class String(RootModel[str]):
    root: str


class TagKey(RootModel[str]):
    root: str


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[str]):
    root: str


class TermDurationInSeconds(RootModel[int]):
    root: int


class UUID(RootModel[constr(pattern=r'[a-f0-9]+(-[a-f0-9]+)*')]):
    root: constr(pattern=r'[a-f0-9]+(-[a-f0-9]+)*')


class UUIDs(RootModel[List[UUID]]):
    root: List[UUID]


class UntagResourceRequest(BaseModel):
    resourceArn: SavingsPlanArn
    tagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class ValidationException(RootModel[Any]):
    root: Any


class CreateSavingsPlanPostRequest(BaseModel):
    clientToken: Optional[str] = Field(
        None,
        description='Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.',
    )
    commitment: str = Field(
        ...,
        description='The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.',
    )
    purchaseTime: Optional[datetime] = Field(
        None,
        description='The time at which to purchase the Savings Plan, in UTC format (YYYY-MM-DDTHH:MM:SSZ).',
    )
    savingsPlanOfferingId: str = Field(..., description='The ID of the offering.')
    tags: Optional[Dict[str, TagValue]] = Field(None, description='One or more tags.')
    upfrontPaymentAmount: Optional[str] = Field(
        None,
        description='The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is supported only if the payment option is <code>Partial Upfront</code>.',
    )


class DeleteQueuedSavingsPlanPostRequest(BaseModel):
    savingsPlanId: str = Field(..., description='The ID of the Savings Plan.')


class ProductType(Enum):
    EC2 = 'EC2'
    Fargate = 'Fargate'
    Lambda = 'Lambda'
    SageMaker = 'SageMaker'


class ListTagsForResourcePostRequest(BaseModel):
    resourceArn: constr(
        pattern=r'arn:aws:[a-z]+:([a-z]{2}-[a-z]+-\d{1}|):(\d{12}):savingsplan\/([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'
    ) = Field(..., description='The Amazon Resource Name (ARN) of the resource.')


class TagResourcePostRequest(BaseModel):
    resourceArn: constr(
        pattern=r'arn:aws:[a-z]+:([a-z]{2}-[a-z]+-\d{1}|):(\d{12}):savingsplan\/([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'
    ) = Field(..., description='The Amazon Resource Name (ARN) of the resource.')
    tags: Dict[str, TagValue] = Field(
        ...,
        description='One or more tags. For example, { "tags": {"key1":"value1", "key2":"value2"} }.',
    )


class UntagResourcePostRequest(BaseModel):
    resourceArn: constr(
        pattern=r'arn:aws:[a-z]+:([a-z]{2}-[a-z]+-\d{1}|):(\d{12}):savingsplan\/([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$'
    ) = Field(..., description='The Amazon Resource Name (ARN) of the resource.')
    tagKeys: List[TagKey] = Field(..., description='The tag keys.')


class CreateSavingsPlanResponse(BaseModel):
    savingsPlanId: Optional[SavingsPlanId] = None


class DeleteQueuedSavingsPlanRequest(BaseModel):
    savingsPlanId: SavingsPlanId


class DurationsList(RootModel[List[SavingsPlansDuration]]):
    root: List[SavingsPlansDuration]


class FilterValuesList(RootModel[List[JsonSafeFilterValueString]]):
    root: List[JsonSafeFilterValueString]


class ListOfStrings(RootModel[List[String]]):
    root: List[String]


class ListTagsForResourceRequest(BaseModel):
    resourceArn: SavingsPlanArn


class ParentSavingsPlanOffering(BaseModel):
    currency: Optional[CurrencyCode] = None
    durationSeconds: Optional[SavingsPlansDuration] = None
    offeringId: Optional[UUID] = None
    paymentOption: Optional[SavingsPlanPaymentOption] = None
    planDescription: Optional[SavingsPlanDescription] = None
    planType: Optional[SavingsPlanType] = None


class SavingsPlanFilter(BaseModel):
    name: Optional[SavingsPlansFilterName] = None
    values: Optional[ListOfStrings] = None


class SavingsPlanFilterList(RootModel[List[SavingsPlanFilter]]):
    root: List[SavingsPlanFilter]


class SavingsPlanOffering(BaseModel):
    currency: Optional[CurrencyCode] = None
    description: Optional[SavingsPlanDescription] = None
    durationSeconds: Optional[SavingsPlansDuration] = None
    offeringId: Optional[UUID] = None
    operation: Optional[SavingsPlanOperation] = None
    paymentOption: Optional[SavingsPlanPaymentOption] = None
    planType: Optional[SavingsPlanType] = None
    productTypes: Optional[SavingsPlanProductTypeList] = None
    properties: Optional[Any] = Field(None, description='The properties.')
    serviceCode: Optional[SavingsPlanServiceCode] = None
    usageType: Optional[SavingsPlanUsageType] = None


class SavingsPlanOfferingFilterElement(BaseModel):
    name: Optional[SavingsPlanOfferingFilterAttribute] = None
    values: Optional[FilterValuesList] = None


class SavingsPlanOfferingFiltersList(RootModel[List[SavingsPlanOfferingFilterElement]]):
    root: List[SavingsPlanOfferingFilterElement]


class SavingsPlanOfferingProperty(BaseModel):
    name: Optional[SavingsPlanOfferingPropertyKey] = None
    value: Optional[JsonSafeFilterValueString] = None


class SavingsPlanOfferingPropertyList(RootModel[List[SavingsPlanOfferingProperty]]):
    root: List[SavingsPlanOfferingProperty]


class SavingsPlanOfferingRate(BaseModel):
    operation: Optional[SavingsPlanRateOperation] = None
    productType: Optional[SavingsPlanProductType] = None
    properties: Optional[Any] = Field(None, description='The properties.')
    rate: Optional[SavingsPlanRatePricePerUnit] = None
    savingsPlanOffering: Optional[ParentSavingsPlanOffering] = None
    serviceCode: Optional[SavingsPlanRateServiceCode] = None
    unit: Optional[SavingsPlanRateUnit] = None
    usageType: Optional[SavingsPlanRateUsageType] = None


class SavingsPlanOfferingRateFilterElement(BaseModel):
    name: Optional[SavingsPlanRateFilterAttribute] = None
    values: Optional[FilterValuesList] = None


class SavingsPlanOfferingRateFiltersList(
    RootModel[List[SavingsPlanOfferingRateFilterElement]]
):
    root: List[SavingsPlanOfferingRateFilterElement]


class SavingsPlanOfferingRatesList(RootModel[List[SavingsPlanOfferingRate]]):
    root: List[SavingsPlanOfferingRate]


class SavingsPlanOfferingsList(RootModel[List[SavingsPlanOffering]]):
    root: List[SavingsPlanOffering]


class SavingsPlanRate(BaseModel):
    currency: Optional[CurrencyCode] = None
    operation: Optional[SavingsPlanRateOperation] = None
    productType: Optional[SavingsPlanProductType] = None
    properties: Optional[Any] = Field(None, description='The properties.')
    rate: Optional[Amount] = None
    serviceCode: Optional[SavingsPlanRateServiceCode] = None
    unit: Optional[SavingsPlanRateUnit] = None
    usageType: Optional[SavingsPlanRateUsageType] = None


class SavingsPlanRateFilter(BaseModel):
    name: Optional[SavingsPlanRateFilterName] = None
    values: Optional[ListOfStrings] = None


class SavingsPlanRateFilterList(RootModel[List[SavingsPlanRateFilter]]):
    root: List[SavingsPlanRateFilter]


class SavingsPlanRateList(RootModel[List[SavingsPlanRate]]):
    root: List[SavingsPlanRate]


class SavingsPlanRateProperty(BaseModel):
    name: Optional[SavingsPlanRatePropertyKey] = None
    value: Optional[JsonSafeFilterValueString] = None


class SavingsPlanRatePropertyList(RootModel[List[SavingsPlanRateProperty]]):
    root: List[SavingsPlanRateProperty]


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    resourceArn: SavingsPlanArn
    tags: TagMap


class DescribeSavingsPlanRatesPostRequest(BaseModel):
    filters: Optional[List[SavingsPlanRateFilter]] = Field(
        None, description='The filters.'
    )
    maxResults: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.',
    )
    nextToken: Optional[constr(pattern=r'^[A-Za-z0-9/=\+]+$', max_length=1024)] = Field(
        None, description='The token for the next page of results.'
    )
    savingsPlanId: str = Field(..., description='The ID of the Savings Plan.')


class DescribeSavingsPlansPostRequest(BaseModel):
    filters: Optional[List[SavingsPlanFilter]] = Field(None, description='The filters.')
    maxResults: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.',
    )
    nextToken: Optional[constr(pattern=r'^[A-Za-z0-9/=\+]+$', max_length=1024)] = Field(
        None, description='The token for the next page of results.'
    )
    savingsPlanArns: Optional[List[SavingsPlanArn]] = Field(
        None,
        description='The Amazon Resource Names (ARN) of the Savings Plans.',
        max_length=100,
    )
    savingsPlanIds: Optional[List[SavingsPlanId]] = Field(
        None, description='The IDs of the Savings Plans.'
    )
    states: Optional[List[SavingsPlanState]] = Field(None, description='The states.')


class DescribeSavingsPlansOfferingRatesPostRequest(BaseModel):
    filters: Optional[List[SavingsPlanOfferingRateFilterElement]] = Field(
        None, description='The filters.'
    )
    maxResults: Optional[conint(ge=0, le=1000)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.',
    )
    nextToken: Optional[constr(pattern=r'^[A-Za-z0-9/=\+]+$', max_length=1024)] = Field(
        None, description='The token for the next page of results.'
    )
    operations: Optional[List[SavingsPlanRateOperation]] = Field(
        None,
        description='The specific AWS operation for the line item in the billing report.',
    )
    products: Optional[List[SavingsPlanProductType]] = Field(
        None, description='The AWS products.'
    )
    savingsPlanOfferingIds: Optional[List[UUID]] = Field(
        None, description='The IDs of the offerings.'
    )
    savingsPlanPaymentOptions: Optional[List[SavingsPlanPaymentOption]] = Field(
        None, description='The payment options.'
    )
    savingsPlanTypes: Optional[List[SavingsPlanType]] = Field(
        None, description='The plan types.'
    )
    serviceCodes: Optional[List[SavingsPlanRateServiceCode]] = Field(
        None, description='The services.'
    )
    usageTypes: Optional[List[SavingsPlanRateUsageType]] = Field(
        None, description='The usage details of the line item in the billing report.'
    )


class DescribeSavingsPlansOfferingsPostRequest(BaseModel):
    currencies: Optional[List[CurrencyCode]] = Field(
        None, description='The currencies.'
    )
    descriptions: Optional[List[SavingsPlanDescription]] = Field(
        None, description='The descriptions.'
    )
    durations: Optional[List[SavingsPlansDuration]] = Field(
        None, description='The durations, in seconds.'
    )
    filters: Optional[List[SavingsPlanOfferingFilterElement]] = Field(
        None, description='The filters.'
    )
    maxResults: Optional[conint(ge=0, le=1000)] = Field(
        None,
        description='The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.',
    )
    nextToken: Optional[constr(pattern=r'^[A-Za-z0-9/=\+]+$', max_length=1024)] = Field(
        None, description='The token for the next page of results.'
    )
    offeringIds: Optional[List[UUID]] = Field(
        None, description='The IDs of the offerings.'
    )
    operations: Optional[List[SavingsPlanOperation]] = Field(
        None,
        description='The specific AWS operation for the line item in the billing report.',
    )
    paymentOptions: Optional[List[SavingsPlanPaymentOption]] = Field(
        None, description='The payment options.'
    )
    planTypes: Optional[List[SavingsPlanType]] = Field(
        None, description='The plan type.'
    )
    productType: Optional[ProductType] = Field(None, description='The product type.')
    serviceCodes: Optional[List[SavingsPlanServiceCode]] = Field(
        None, description='The services.'
    )
    usageTypes: Optional[List[SavingsPlanUsageType]] = Field(
        None, description='The usage details of the line item in the billing report.'
    )


class CreateSavingsPlanRequest(BaseModel):
    clientToken: Optional[ClientToken] = None
    commitment: Amount
    purchaseTime: Optional[DateTime] = None
    savingsPlanOfferingId: SavingsPlanOfferingId
    tags: Optional[TagMap] = None
    upfrontPaymentAmount: Optional[Amount] = None


class DescribeSavingsPlanRatesRequest(BaseModel):
    filters: Optional[SavingsPlanRateFilterList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None
    savingsPlanId: SavingsPlanId


class DescribeSavingsPlanRatesResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    savingsPlanId: Optional[SavingsPlanId] = None
    searchResults: Optional[SavingsPlanRateList] = None


class DescribeSavingsPlansOfferingRatesRequest(BaseModel):
    filters: Optional[SavingsPlanOfferingRateFiltersList] = None
    maxResults: Optional[PageSize] = None
    nextToken: Optional[PaginationToken] = None
    operations: Optional[SavingsPlanRateOperationList] = None
    products: Optional[SavingsPlanProductTypeList] = None
    savingsPlanOfferingIds: Optional[UUIDs] = None
    savingsPlanPaymentOptions: Optional[SavingsPlanPaymentOptionList] = None
    savingsPlanTypes: Optional[SavingsPlanTypeList] = None
    serviceCodes: Optional[SavingsPlanRateServiceCodeList] = None
    usageTypes: Optional[SavingsPlanRateUsageTypeList] = None


class DescribeSavingsPlansOfferingRatesResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    searchResults: Optional[SavingsPlanOfferingRatesList] = None


class DescribeSavingsPlansOfferingsRequest(BaseModel):
    currencies: Optional[CurrencyList] = None
    descriptions: Optional[SavingsPlanDescriptionsList] = None
    durations: Optional[DurationsList] = None
    filters: Optional[SavingsPlanOfferingFiltersList] = None
    maxResults: Optional[PageSize] = None
    nextToken: Optional[PaginationToken] = None
    offeringIds: Optional[UUIDs] = None
    operations: Optional[SavingsPlanOperationList] = None
    paymentOptions: Optional[SavingsPlanPaymentOptionList] = None
    planTypes: Optional[SavingsPlanTypeList] = None
    productType: Optional[SavingsPlanProductType] = None
    serviceCodes: Optional[SavingsPlanServiceCodeList] = None
    usageTypes: Optional[SavingsPlanUsageTypeList] = None


class DescribeSavingsPlansOfferingsResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    searchResults: Optional[SavingsPlanOfferingsList] = None


class DescribeSavingsPlansRequest(BaseModel):
    filters: Optional[SavingsPlanFilterList] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[PaginationToken] = None
    savingsPlanArns: Optional[SavingsPlanArnList] = None
    savingsPlanIds: Optional[SavingsPlanIdList] = None
    states: Optional[SavingsPlanStateList] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[TagMap] = None


class SavingsPlan(BaseModel):
    commitment: Optional[Amount] = None
    currency: Optional[CurrencyCode] = None
    description: Optional[String] = None
    ec2InstanceFamily: Optional[EC2InstanceFamily] = None
    end: Optional[String] = None
    offeringId: Optional[SavingsPlanOfferingId] = None
    paymentOption: Optional[SavingsPlanPaymentOption] = None
    productTypes: Optional[SavingsPlanProductTypeList] = None
    recurringPaymentAmount: Optional[Amount] = None
    region: Optional[Region] = None
    savingsPlanArn: Optional[SavingsPlanArn] = None
    savingsPlanId: Optional[SavingsPlanId] = None
    savingsPlanType: Optional[SavingsPlanType] = None
    start: Optional[String] = None
    state: Optional[SavingsPlanState] = None
    tags: Optional[TagMap] = None
    termDurationInSeconds: Optional[TermDurationInSeconds] = None
    upfrontPaymentAmount: Optional[Amount] = None


class SavingsPlanList(RootModel[List[SavingsPlan]]):
    root: List[SavingsPlan]


class DescribeSavingsPlansResponse(BaseModel):
    nextToken: Optional[PaginationToken] = None
    savingsPlans: Optional[SavingsPlanList] = None
